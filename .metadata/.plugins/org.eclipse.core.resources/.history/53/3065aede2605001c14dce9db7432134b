package com.assignments;

import java.time.Duration;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.Random;

import com.assignments.OlympicAtleten.Sport;

public class Olympic {
	/*
	 * Assignment:
	 * 
	 * 1) Zorg ervoor dat de geboortedatum willekeurig is tussen 2 data bijv atleten
	 * moeten geboren zijn tussen 1990 - 2003
	 * 
	 * 2) Zoek naar alle individuele sporters
	 * 
	 * 3) Druk af hoeveel teamsporters er in de lijst zitten
	 * 
	 * 4) Druk af hoeveel sporters er zijn die jarig zijn in Maart
	 *
	 * 5) Druk af hoeveel sporters er zijn die geboren zijn in 2000-2002
	 * 
	 * 6) Druk de geboortedatum af in de Europese notatie 1 January 2002 (en niet de
	 * Amerikaanse 2002-01-01)
	 */

	public static ArrayList<OlympicAtleten> atletenList = new ArrayList<>();

	// zoek naar alle atleten die zwemmen en druk deze dan af
	public static void search(Sport searchSportType) {
		search("", searchSportType);
	}

	// zoek naar alle atleten die jair heten en zwemmen en druk deze dan af. Als
	// firstName null is (negeer deze)
	public static void search(String firstName, Sport searchSportType) {

		for (int i = 0; i < atletenList.size(); i++) {
			OlympicAtleten atleet = atletenList.get(i);
			if (atleet.getSport().equals(searchSportType)) {
				String voornaam = atleet.getvoornaam();
				if (firstName.equals("") || firstName.equals(voornaam)) {
					atleet.vertoonAtleet();
				}
			}
		}
	}

	public static void main(String args[]) {

		fillAtletenArray();

		// zoek naar alle atleten die zwemmen en druk deze dan af
		search(Sport.ZWEMMEN);
		// of
		search("", Sport.ZWEMMEN);

		// zoek naar alle atleten die jair heten en zwemmen en druk deze dan af
		search("Jair", Sport.ZWEMMEN);

		//* 1) Zorg ervoor dat de geboortedatum willekeurig is tussen 2 data bijv atleten
		//* moeten geboren zijn tussen 1990 - 2003
		LocalDate startDatum = LocalDate.of(1,Month.JANUARY,1999 );
		LocalDate endDatum = LocalDate.of(31, Month.DECEMBER,2003);
		Duration duration = Duration.between(startDatum.atStartOfDay(), endDatum.atStartOfDay());
//		System.err.println(" verschil is " + duration.toDays());
		LocalDate nextDate = startDatum.plusDays(1);
//		System.err.println("D1=" + startDatum + ", D2=" + nextDate);
//		System.err.println("Maand van D1=" + startDatum.getMonthValue() + ", maand=" + startDatum.getMonth());
//		System.err.println("Jaar van D1=" + startDatum.getYear());
	}

	public static void fillAtletenArray() {
		for (int i = 0; i < 50; i++) {
			Random random = new Random();

			String[] voornamen = { "Jair", "Sherona", "Kenz", "Rose", "Renzo" };
			int chooseVoornaam = random.nextInt(voornamen.length);

			String[] achternamen = { "Tjon en Fa", "Van Brussel", "Kartoebie", "Douglas", "West" };
			int chooseAchternaam = random.nextInt(achternamen.length);

			int chooseSport = random.nextInt(Sport.values().length);

			LocalDate[] geboorteDatum = { LocalDate.of(1999, 9, 1), LocalDate.of(2006, 9, 1), LocalDate.of(2004, 9, 1),
					LocalDate.of(2003, 9, 1), LocalDate.of(2004, 9, 1) };

			int choosegeboorteDatum = random.nextInt(geboorteDatum.length);


			OlympicAtleten atleet = new OlympicAtleten(voornamen[chooseVoornaam], achternamen[chooseAchternaam], 
					geboorteDatum[choosegeboorteDatum], Sport.values()[chooseSport]);

			atletenList.add(atleet);

		}

	}
}
